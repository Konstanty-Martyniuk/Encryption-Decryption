type: edu
custom_name: stage6
files:
- name: src/encryptdecrypt/Main.java
  visible: true
  text: |
    package encryptdecrypt;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/EncryptDecryptTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.common.FileUtils;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.io.IOException;
    import java.nio.charset.StandardCharsets;
    import java.nio.file.Files;
    import java.nio.file.NoSuchFileException;
    import java.nio.file.Path;
    import java.nio.file.Paths;
    import java.util.List;

    public class EncryptDecryptTest extends StageTest<String> {

        @Override
        public List<TestCase<String>> generate() {
            return List.of(
                new TestCase<String>()
                    .addArguments(
                        "-alg", "unicode",
                        "-mode", "enc",
                        "-key", "5",
                        "-in", "in.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("\\jqhtrj%yt%m~ujwxpnqq&")
                    .addFile("in.txt", "Welcome to hyperskill!"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "0",
                        "-mode", "enc",
                        "-alg", "unicode",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("Hello")
                    .addFile("input.txt", "Hello"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "1",
                        "-in", "i.txt",
                        "-alg", "unicode",
                        "-out", "output.txt",
                        "-mode", "enc"
                    )
                    .setAttach("123456789")
                    .addFile("i.txt", "012345678"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-in", "input.txt",
                        "-out", "output.txt",
                        "-alg", "unicode",
                        "-key", "5"
                    )
                    .setAttach("Welcome to hyperskill!")
                    .addFile("input.txt", "\\jqhtrj%yt%m~ujwxpnqq&"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-alg", "unicode",
                        "-key", "0",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("Hi")
                    .addFile("input.txt", "Hi"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "1",
                        "-in", "input.txt",
                        "-alg", "unicode",
                        "-out", "output.txt"
                    )
                    .setAttach("111122223333")
                    .addFile("input.txt", "222233334444"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "5",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("bjqhtrj yt mdujwxpnqq")
                    .addFile("input.txt", "welcome to hyperskill"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("treasure")
                    .addFile("input.txt", "dbokcebo"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "12",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("cphpchdjcijdjibhdjebhjucspucmdmudbnuccup")
                    .addFile("input.txt", "qdvdqvrxqwxrxwpvrxspvxiqgdiqarairpbiqqid"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("y")
                    .addFile("input.txt", "i"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("i")
                    .addFile("input.txt", "y")
            );
        }

        @Override
        public CheckResult check(String reply, String clue) {
            String fileName = "output.txt";
            String output;

            try {
                Path path = Paths.get(FileUtils.CURRENT_DIR + fileName);
                output = Files.readString(path, StandardCharsets.UTF_8);
            } catch (NoSuchFileException e) {
                return new CheckResult(false, "File output.txt not found!");
            } catch (IOException e) {
                return new CheckResult(false, "Cannot read from file!");
            }

            if (!output.trim().equals(clue.trim())) {
                return new CheckResult(false, "Wrong result in the file!");
            }

            return new CheckResult(true);
        }

    }
  learner_created: false
- name: output.txt
  visible: true
  text: |
    111122223333
  learner_created: true
- name: src/encryptdecrypt/UnicodeAlgorithm.java
  visible: true
  text: |
    package encryptdecrypt;

    public class EncryptionLogic {

        public static String shiftEncryption(String source, int key) {
            StringBuilder sb = new StringBuilder();
            for (char letter: source.toCharArray()) {
                int intValue = letter;
                intValue += key;
                sb.append((char) intValue);
            }
            return sb.toString();
        }
    }
  learner_created: true
- name: src/encryptdecrypt/ShiftAlgorithm.java
  visible: true
  learner_created: true
- name: src/encryptdecrypt/AppConfig.java
  visible: true
  learner_created: true
- name: src/encryptdecrypt/EncryptionAlgorithm.java
  visible: true
  learner_created: true
- name: src/encryptdecrypt/EncryptionMode.java
  visible: true
  learner_created: true
- name: src/encryptdecrypt/Application.java
  visible: true
  text: |
    package encryptdecrypt;

    import java.io.File;
    import java.io.FileNotFoundException;
    import java.io.PrintWriter;
    import java.util.Scanner;

    public class UI {

        public static void printUI(String[] args) {
            String mode = "enc";
            String text = "";
            String in = "";
            String out = "";
            int key = 0;

            for (int i = 1; i < args.length; i+=2){
                if (args[i - 1] == "-key") {
                    key = Integer.parseInt(args[i]);
                } else if (args[i - 1] == "-mode") {
                    mode = args[i];
                }
                else if (args[i - 1] == "-data") {
                    text = args[i];
                } else if (args[i - 1] == "-in") {
                    in = args[i];
                } else if (args[i - 1] == "-out") {
                    out = args[i];
                }
            }

            text = "".equals(text) && "".equals(in) ? "" : !"".equals(text) && !"".equals(in) ? text :
                    "".equals(text) && !"".equals(in) ? readFile(in) : text;

            String enc = EncryptionLogic.shiftEncryption(text, key);
            String dec = EncryptionLogic.shiftEncryption(text, key * -1);

            outputResult(mode, out, enc, dec);

        }

        public static void outputResult(String mode, String out, String enc, String dec){
            if (mode.equals("enc") && "".equals(out)) {
                System.out.println(enc);
            } else if (mode.equals("enc") && !"".equals(out)) {
                printTextToFile(out, enc);
            } else if (mode.equals("dec") && "".equals(out)) {
                System.out.println(dec);
            } else if (mode.equals("dec") && !"".equals(out)) {
                printTextToFile(out, dec);
            } else {
                System.out.println("Error");
            }
        }

        private static void printTextToFile(String out, String text) {
            File file = new File(out);
            try (PrintWriter printWriter = new PrintWriter(file)) {
                printWriter.println(text);
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }

        private static String readFile(String in){
            String text = "";
            try {
                File file = new File(in);
                Scanner scanner = new Scanner(file);
                while (scanner.hasNextLine()) {
                    text = scanner.nextLine();
                }
                scanner.close();
            } catch (FileNotFoundException e) {
                System.out.println("An error occurred.");
                e.printStackTrace();
            }
            return text;
        }

    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/46/stages/250/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Tue, 11 May 2021 15:26:30 UTC
record: -1
